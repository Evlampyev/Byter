unit Разминка;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Imaging.jpeg, Vcl.ExtCtrls,
  Vcl.StdCtrls, Vcl.Buttons, Vcl.Imaging.pngimage, Vcl.Imaging.GIFImg, Vcl.Menus, StrUtils,
  IdBaseComponent, IdComponent, IdTCPConnection, IdTCPClient, httpapp, System.NetEncoding,
  IdIPWatch;
Type
  TFriendPanel = Class(Tpanel);
type
  TRazm = class(TForm)
    Fon: TImage;
    Ravno2: TImage;
    Ravno1: TImage;
    Panel6: TPanel;
    Panel7: TPanel;
    Panel5: TPanel;
    Panel8: TPanel;
    Panel9: TPanel;
    Panel11: TPanel;
    Panel12: TPanel;
    Panel13: TPanel;
    Ravno3: TImage;
    Ravno4: TImage;
    MainMenu1: TMainMenu;
    Control: TMenuItem;
    N2: TMenuItem;
    N3: TMenuItem;
    Letter: TMenuItem;
    Autor: TMenuItem;
    Low: TMenuItem;
    NOrmal: TMenuItem;
    Hi: TMenuItem;
    VeryHi: TMenuItem;
    Sopos: TMenuItem;
    N21: TMenuItem;
    N31: TMenuItem;
    N11: TMenuItem;
    N12: TMenuItem;
    ImageLevel: TImage;
    Panel10: TPanel;
    ResultButton: TButton;
    Stopwatch: TLabel;
    Timer1: TTimer;
    Registration: TMenuItem;
    RegLabel: TLabel;
    IdTCPClient1: TIdTCPClient;
    Edit1: TEdit;
    ServerOption: TMenuItem;
    ServerOptionPanel: TPanel;
    Edit2: TEdit;
    Edit3: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    OptionCloseButton: TButton;
    SendButton: TButton;
    IdIPWatch1: TIdIPWatch;
    ConnectLabel: TLabel;
    ExitImage: TImage;
    ExitPanel: TPanel;
    Panel14: TPanel;
    Ravno5: TImage;
    Panel15: TPanel;
    Panel16: TPanel;
    Panel17: TPanel;
    Image1: TImage;
    Image2: TImage;
    Image3: TImage;
    Image4: TImage;
    Image5: TImage;
    Image6: TImage;
    Image7: TImage;
    Image8: TImage;
    Image9: TImage;
    Image10: TImage;
    Memo1: TMemo;

    procedure ВыходClick(Sender: TObject);
    procedure Panel2MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure FormCreate(Sender: TObject);
    procedure Panel5MouseLeave(Sender: TObject);
    procedure AutorClick(Sender: TObject);
    procedure LowClick(Sender: TObject);
    procedure NOrmalClick(Sender: TObject);
    procedure HiClick(Sender: TObject);
    procedure VeryHiClick(Sender: TObject);
    procedure ResultButtonClick(Sender: TObject);
    procedure SoposClick(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
    procedure RegistrationClick(Sender: TObject);
    procedure ServerOptionClick(Sender: TObject);
    procedure OptionCloseButtonClick(Sender: TObject);
    procedure SendButtomClick(Sender: TObject);
    procedure Image9MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);


  private
    { Private declarations }
     Gif,ExitGif: TGifImage;
  Procedure ClearFormRazm;
  public
    { Public declarations }

    procedure SendButtonClick;
  end;
Type
   MyRndmNmbr = Record
      MyNumber : Word; {число}
      MySize : Byte;   {степерь двойки}
      MyMeasure : Byte;  {единица измерения}
      MyColor  : TColor; {цвет}
      End;
var
  Razm: TRazm;
  PanelL: Array [1..5, 1..2] of Tpanel;
  PanelA: Array [1..5, 1..2] of Tpanel;
  ImageL: Array [1..5, 1..2] of TImage;
  NumberOnImage: Array [1..5, 1..2] of MyRndmNmbr;
  Level, LevelTime, ClassLevel: Byte;
  TimeNow, TimeOne : TTime;
  LastName, NameI, School: String;
  SendText:String;

implementation

{$R *.dfm}

uses Oprogr, Registration, ExprDraw, ExprMake;
    // Выбор режима сложности
procedure TRazm.LowClick(Sender: TObject);
begin
      IF Not Low.Checked Then
      Begin
        Low.Checked := True;
        Hi.Checked := False;
        Normal.Checked := False;
        VeryHi.Checked := False;
        ImageLevel.Picture.LoadFromFile('Pictures\Level\Low.png');
        Panel10.Caption := 'ЛЁГКИЙ УРОВЕНЬ';
        Level := 1;
      End;
end;
procedure TRazm.NOrmalClick(Sender: TObject);
begin
     IF Not Normal.Checked Then
      Begin
        Low.Checked := False;
        Hi.Checked := False;
        VeryHi.Checked := False;
        Normal.Checked := True;
        ImageLevel.Picture.LoadFromFile('Pictures\Level\Normal.png');
        Panel10.Caption := 'СРЕДНИЙ УРОВЕНЬ';
        Level := 2;
      End;
end;
procedure TRazm.HiClick(Sender: TObject);
begin
     IF Not Hi.Checked Then
      Begin
        Low.Checked := False;
        Hi.Checked := True;
        Normal.Checked := False;
        VeryHi.Checked := False;
        ImageLevel.Picture.LoadFromFile('Pictures\Level\Hi.png');
        Panel10.Caption := 'СЛОЖНЫЙ УРОВЕНЬ';
        Level := 3;
      End;
end;
procedure TRazm.Image9MouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
 const
    SC_DRAGMOVE = $F012;
begin
    ReleaseCapture;
    ((Sender as TImage).Parent as TPAnel).Perform(WM_SYSCOMMAND, SC_DRAGMOVE, 0);
end;

procedure TRazm.VeryHiClick(Sender: TObject);
begin
     IF Not VeryHi.Checked Then
      Begin
        Low.Checked := False;
        Hi.Checked := False;
        Normal.Checked := False;
        VeryHi.Checked := True;
        ImageLevel.Picture.LoadFromFile('Pictures\Level\VeryHi.png');
        Panel10.Caption := 'ЗАСТАВЛЯЕТ ДУМАТЬ';
        Level := 4;
      End;
end;

Function Stepen (k: Byte): Longint;  // возвращает степень двойки
    Var
      i:Byte;
      Step: Longint;
    Begin
      Step := 1;
      for i := 1 to k do
        Step := Step*2;
      Stepen := Step;
    End;

Procedure TRazm.ClearFormRazm;
Var
  i:byte;
Begin
  for i  := 1 to 5 do
    Begin
      PanelL[i,1].Visible := False;
      PanelL[i,2].Visible := False;
    End;
  StopWatch.Caption := '0:00:0';
  ResultButton.Enabled := False;
End;

procedure TRazm.AutorClick(Sender: TObject);
begin
  About.Visible := True;
  About.SetFocus;
end;

procedure TRazm.ВыходClick(Sender: TObject);  // Закрытие формы по кнопке ВЫХОД
begin
  Close;
end;

procedure TRazm.OptionCloseButtonClick(Sender: TObject);
begin
  IdTCPClient1.Port := StrToInt(Edit2.Text);
  IdTCPClient1.Host := Edit3.Text;
  ServerOptionPanel.Visible := False;
end;

procedure TRazm.SendButtomClick(Sender: TObject);
Begin
  SendText:= 'IP =' + IdIPWatch1.LocalIP;
  SendButtonClick;
End;

procedure TRazm.SendButtonClick;
var
    s:TStringStream;
begin
  try
        Razm.IdTCPClient1.Connect; //Соединение
    Try
        s:=TStringStream.Create; //Инициализация потока s
        s.WriteString(SendText);  //Запись сообщения в поток s
        s.Position:=0; //Установка позиция на начало потока s
        Razm.IdTCPClient1.IOHandler.Write(s, s.Size, true); //Передача сообщения
        s.Free; //Уничтожение потока s
      ConnectLabel.Caption := 'Связь есть';
    Except
      ConnectLabel.Caption := 'Нет связи';
    End;
  finally
      Razm.IdTCPClient1.Disconnect; //Отсоединение
  end;
end;

procedure TRazm.FormCreate(Sender: TObject);
 Var
    i, k, l: Byte;
    ImPer: TImage;
begin
  Fon.Picture.LoadFromFile('pictures\fons\Main1920X1080.jpg');

  l := Trunc ((Razm.ClientHeight-5*Panel11.Height-ResultButton.Height-20)/7);
  Memo1.Lines.Add(IntToStr(i));
  ResultButton.Top := l*6 + 5*Panel11.Height+15;
  ExitPanel.Top := ResultButton.Top;

  for i := 0 to ComponentCount-1 do   // Заполнение массивов имеющимися элементами с формы
    Begin
     if Components[i].Tag > 100 Then
        PanelA [(Components[i].Tag div 100), (Components[i].Tag mod 10)] := (Components[i] as TPanel)
        Else
          If Components[i].Tag > 10 then
            Begin
             IF Components[i].ClassType=TPanel Then PanelL [Components[i].Tag div 10, Components[i].Tag mod 10] := (Components[i] as TPanel);
             IF Components[i].ClassType=TImage Then ImageL [Components[i].Tag div 10, Components[i].Tag mod 10] := (Components[i] as TImage);
            End;
    End;



for i := 1 to 5 do   //расстановка компонентов на форме
  for k := 1 to 2 do
    Begin
     PanelA[i,k].Top := l*i+Panel11.Height*(i-1);
     PanelA[i,k].Left := 830 + 300*(k-1);
  End;
  ResultButton.Left := PanelA[1,1].Left;
  ExitPAnel.Width := Trunc((98/112)*ExitPanel.Height)+2;
  ExitPanel.Left := PanelA[1,2].Left+PanelA[1,2].Width-ExitPanel.Width;
  for I := 1 to 5 do
    Begin
        ImPer := FindComponent('Ravno'+IntToStr(i)) as TImage;
        ImPer.Picture.LoadFromFile('Pictures\Ather\Ravno.png');
        Imper.Top := PanelA[i,1].Top;
    End;

   { Gif := TGifImage.Create;
    Gif.LoadFromFile('Pictures\Gif\Blink.gif');
    Gif.Animate := True;
    Gif.AnimateLoop := glEnabled;
    Ravno1.Picture.Assign(Gif);
    Ravno2.Picture.Assign(Gif);
    Ravno3.Picture.Assign(Gif);
    Ravno4.Picture.Assign(Gif);
    Ravno5.Picture.Assign(Gif);}

      ExitGif := TGifImage.Create;
      ExitGif.LoadFromFile('Pictures\Gif\ExitLive.gif');
      ExitGif.Animate := True;
      ExitImage.Picture.Assign(ExitGif);
  Level := 1;     // уровень сложности
  ClassLevel:=1;  // уровень диапазона чисел в задании в зависимости от класс, без регистрации по умолчанию 1
  ImageLevel.Picture.LoadFromFile('Pictures\Level\Low.png');
  Panel10.Caption := 'ЛЁГКИЙ УРОВЕНЬ';
  try
    IdTCPClient1.Connect;
    ConnectLabel.Caption := 'Cвязь есть';
    IdTCPClient1.DisConnect;
  except
    ConnectLabel.Caption := 'Нет связи';
  end;

  N21.Enabled := False; //не активные пустые пункты меню выбор режима
  N31.Enabled := False;
  N11.Enabled := False;
end;

procedure TRazm.Panel2MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);// Перемещение объектов по форме
 const
    SC_DRAGMOVE = $F012;
 begin
    ReleaseCapture;
    (Sender as TPanel).Perform(WM_SYSCOMMAND, SC_DRAGMOVE, 0);
 end;

procedure TRazm.Panel5MouseLeave(Sender: TObject); // Расставляет аккуратно все панельки на места
var
  aRect : TRect;
  Lx,Ly, Ax,Ay, Px, Py, Xx, Yy : Byte;
begin
  Lx := 1;
  Ly := 1;

  if Sender.ClassType = TPanel then
    While Sender <> PanelL[Lx,Ly] do
      Begin
        Ly := Ly+1;
        if Ly > 2  then
        Begin
          Ly := 1;
          Lx := Lx+1;
        End;
      End Else
    While ((Sender as TImage).Parent as TPanel) <> PanelL[Lx,Ly] do
      Begin
        Ly := Ly+1;
        if Ly > 2  then
        Begin
          Ly := 1;
          Lx := Lx+1;
        End;
      End;

 for Ax := 1 to 5 do
   for Ay := 1 to 2 do
     if IntersectRect(aRect, PanelL[Lx,Ly].BoundsRect, PanelA[Ax,Ay].BoundsRect) then
        Begin
          Px := 1; Py := 1; Xx:=0;
          While (Xx=0) And (Px < 5) do
            Begin
                if IntersectRect(aRect, PanelL[Lx,Ly].BoundsRect, PanelL[Px,Py].BoundsRect) then
                  Begin
                    Xx := Px;
                    Yy := Py;
                  End;
                Py := Py +1;
                if Py = 3 then
                  Begin
                    Py := 1;
                    Px := Px +1;
                  End
            End;
         if Xx > 0 then PanelL[Xx,Yy].Left := PanelL[Xx,Yy].Left - 200;
            PanelL[Lx,Ly].Top := PanelA[Ax,Ay].Top+6;
            PanelL[Lx,Ly].Left := PanelA[Ax,Ay].Left+6;
          End;
        End;

procedure TRazm.RegistrationClick(Sender: TObject);
Begin
  ClearFormRazm;
  FormRegistration.Visible := True;
  FormRegistration.SetFocus;
  StopWatch.Visible := False;
  ResultButton.Enabled := False;
End;

procedure TRazm.ResultButtonClick(Sender: TObject); // Проверяет правильность выполнения задания
Var
  i, mark,z,q,w,Isk : Byte;
  TopFirst, Shag: Word;
  ResultKoef: Array [1..4] of Longint;
  k: Integer;
  ImPer :TImage;
begin
 TimeOne := Time-TimeNow;
 Timer1.Enabled := False;
 Mark := 0;
 N2.Enabled := True;
 Sopos.Enabled := True;
ResultKoef [1] := 1;
ResultKoef [2] := 8;
ResultKoef [3] := 8192;
ResultKoef [4] := 8388608;
for i := 1 to 5 do
  for k := 1 to 2 do 
    Memo1.Lines.Add(IntToStr(i)+IntToStr(k)+' - ' + IntToStr(PanelL[i,k].Top));
 {for i := 1 to 5 do
    Begin
      if PanelL[i,1].Top = PanelL[i,2].Top then Mark := Mark +1;
    End;}
{TopFirst := PanelL[1,1].Top+6; Shag := 117;  }
q:=1; w:=1;
While (q < 6) and (w < 3) do
Begin
for i := 1 to 5 do
  for k := 1 to 2 do
    Begin
        if (PanelL[q,w].Top = PanelL[i,k].Top) and ((q<>i) or (w<>k)) and (PanelL[i,k].Cursor=crHandPoint)then
          Begin
           PanelL[i,k].Cursor := crDefault;
           PanelL[q,w].Cursor := crDefault;
           If NumberOnImage[q,w].MyNumber = 0 Then Inc(NumberOnImage[q,w].MyNumber);   //только для подсчётов
           If NumberOnImage[i,k].MyNumber = 0 Then Inc(NumberOnImage[i,k].MyNumber);   //только для подсчётов
           If NumberOnImage[q,w].MyNumber*Stepen(NumberOnImage[q,w].MySize)*ResultKoef[NumberOnImage[q,w].MyMeasure] = NumberOnImage[i,k].MyNumber*Stepen(NumberOnImage[i,k].MySize)*ResultKoef[NumberOnImage[i,k].MyMeasure] Then
              Begin
                Inc(Mark);
                z:=1;
                ImPer := FindComponent('Ravno'+IntToStr(z)) as TImage;
                while ImPer.Top <> (PanelL [q,w].Top-6) do
                  Begin
                   Inc(z);
                   ImPer := FindComponent('Ravno'+IntToStr(z)) as TImage;
                  End;
                ImPer.Picture.LoadFromFile('Pictures\Ather\Plus.png');
              End Else
                    Begin
                      z:=1;
                      ImPer := FindComponent('Ravno'+IntToStr(z)) as TImage;
                      while ImPer.Top <> (PanelL [q,w].Top-6) do
                        Begin
                         Inc(z);
                         ImPer := FindComponent('Ravno'+IntToStr(z)) as TImage;
                        End;
                      ImPer.Picture.LoadFromFile('Pictures\Ather\Minus.png');
                    End;

          End;
    End;
w:=w+1;
If w=3 then Begin Inc(q); w := 1; end;
End;
 ShowMessage ('Верно - ' + IntToStr (Mark));
 SendText := RegLabel.Caption + ' ' + IntToStr(Level) + ' ' + StopWatch.Caption + ' ' + IntToStr (Mark);
 SendButtonClick;
 ClearFormRazm;
End;

procedure TRazm.ServerOptionClick(Sender: TObject);
begin
  ServerOptionPanel.Visible:=True;
  ServerOptionPanel.SetFocus;
end;

procedure TRazm.SoposClick(Sender: TObject);
Var
  k, l, i, FontSize: Byte;
  Measure: array [1..5] of String[7];
  ColorFont : array [0..4] of TColor;
  Yes : Boolean;
  Expr: TExprClass;
  Bit: String[7];
  ImPer: TImage;

begin
N2.Enabled := False;
Sopos.Enabled := False;
for I := 1 to 5 do
    Begin
        (FindComponent('Ravno'+IntToStr(i)) as TImage).Picture.LoadFromFile('Pictures\Ather\Ravno.png');
    End;
for i :=1 to 5 do
  for k := 1 to 2 do
          Begin
            ImageL[i, k].Picture := nil;
            PanelL[i,k].Cursor := crHandPoint;
          End;
FillChar(NumberOnImage,sizeof(NumberOnImage),0);  //обнуление массива
    ColorFont [0] := 0;
    ColorFont [1] := RGB(0,0,255);
    ColorFont [2] := 255;
    ColorFont [3] := 65280;
    ColorFont [4] := 16711935;
    Measure [1] := ' бит';
    Measure [2] := ' байт';
    Measure [3] := ' Кбайт';
    Measure [4] := ' Мбайт';
    Measure [5] := ' Гбайт';

  for i := 1 to 5 do
    Begin
       NumberOnImage[i,1].MyColor := ColorFont[Random(5)];
       NumberOnImage[i,2].MyColor := ColorFont[Random(5)];
    End;
    TimeNow := Time;
    Timer1.Enabled := True;
    StopWatch.Visible := True;
   for i :=1 to 5 do
    for k := 1 to 2 do
      Begin
          PanelL [i,k].Top := Random (600) + 25;
          PanelL [i,k].Left := Random (450) + 200;
          PanelL [i,k].Visible := True;
      End;

   case Level of
    1: Begin
       l:=1;
       Repeat
         k := Random (ClassLevel*10)+1; Yes := False; i := 1;
          While (Not Yes) and (i < 5) do
            Begin
              if k = NumberOnImage[i,1].MyNumber then Yes := True;
              i := i +1;
            End;
          if Not Yes Then
            Begin
              NumberOnImage [l,1].MyNumber := k; NumberOnImage [l,2].MyNumber := k*8;
              l := l+1;
            End;
       Until l=6;
       For i := 1 to 5 do
          Begin
            NumberOnImage [i,1].MyMeasure := 2;
            NumberOnImage [i,2].MyMeasure := 1;
          End;
        End;
    2: Begin
            NumberOnImage [1,1].MyNumber := Random (ClassLevel*8)+5;
            NumberOnImage [1,1].MyMeasure := 2;
            NumberOnImage [1,2].MyNumber := NumberOnImage [1,1].MyNumber * 8;
            NumberOnImage [1,2].MyMeasure := 1;
            NumberOnImage [2,1].MyNumber := Random (ClassLevel*5)+1;
            NumberOnImage [2,1].MyMeasure := 3;
            NumberOnImage [2,2].MyNumber := NumberOnImage [2,1].MyNumber * 1024;
            NumberOnImage [2,2].MyMeasure := 2;
            NumberOnImage [3,1].MyNumber := Random (ClassLevel*4)+1;
            NumberOnImage [3,1].MyMeasure := 4;
            NumberOnImage [3,2].MyNumber := NumberOnImage [3,1].MyNumber * 1024;
            NumberOnImage [3,2].MyMeasure := 3;
            NumberOnImage [4,1].MyNumber := Random (ClassLevel*3)+1;
            NumberOnImage [4,1].MyMeasure := 3;
            NumberOnImage [4,2].MyNumber := NumberOnImage [4,1].MyNumber * 1024*8;
            NumberOnImage [4,2].MyMeasure := 1;
            NumberOnImage [5,1].MyNumber := Random (ClassLevel*3)+5;
            NumberOnImage [5,1].MyMeasure := 3;
            NumberOnImage [5,2].MyNumber := NumberOnImage [5,1].MyNumber * 1024*8;
            NumberOnImage [5,2].MyMeasure := 1;
       End;
    3: Begin
            for i := 1 to 5 do
              for k := 1 to 2 do
                           NumberOnImage [i,k].MyNumber := 0;
            NumberOnImage [1,1].MySize := Random (ClassLevel*7)+9;
            NumberOnImage [1,1].MyMeasure := 1;
            NumberOnImage [1,2].MySize := NumberOnImage [1,1].MySize-3;
            NumberOnImage [1,2].MyMeasure := 2;
            NumberOnImage [2,1].MySize := Random (ClassLevel*6)+14;
            NumberOnImage [2,1].MyMeasure := 1;
            NumberOnImage [2,2].MySize := NumberOnImage [2,1].MySize-13;
            NumberOnImage [2,2].MyMeasure := 3;
            NumberOnImage [3,1].MySize := Random (ClassLevel*4)+24;
            NumberOnImage [3,1].MyMeasure := 1;
            NumberOnImage [3,2].MySize := NumberOnImage [3,1].MySize-23;
            NumberOnImage [3,2].MyMeasure := 4;
            NumberOnImage [4,1].MySize := Random (ClassLevel*7)+21;
            NumberOnImage [4,1].MyMeasure := 2;
            NumberOnImage [4,2].MySize := NumberOnImage [4,1].MySize-20;
            NumberOnImage [4,2].MyMeasure := 4;
            NumberOnImage [5,1].MySize := Random (ClassLevel*7)+17;
            NumberOnImage [5,1].MyMeasure := 1;
            NumberOnImage [5,2].MySize := NumberOnImage [5,1].MySize-13;
            NumberOnImage [5,2].MyMeasure := 3;
       End;
    4: Begin
      NumberOnImage [1,1].MyNumber := Random (ClassLevel*24)+2;
      NumberOnImage [2,1].MyNumber := Random (ClassLevel*24)+1;
      NumberOnImage [3,1].MyNumber := Random (ClassLevel*24)+1;
      NumberOnImage [4,1].MyNumber := Random (ClassLevel*24)+1;
      NumberOnImage [5,1].MyNumber := Random (ClassLevel*24)+1;
        for i := 1 to 5 do
            If NumberOnImage [i,1].MyNumber mod 2 = 1 Then Inc(NumberOnImage [i,1].MyNumber);
      NumberOnImage [1,1].MySize := Random (12) + 4;
      NumberOnImage [1,1].MyMeasure := 1;      // первая единица измерения
      NumberOnImage [1,2].MyNumber := NumberOnImage [1,1].MyNumber;
      NumberOnImage [1,2].MySize := NumberOnImage [1,1].MySize - 3;
       NumberOnImage [2,1].MySize := Random (12) + 13;
       NumberOnImage [2,1].MyMeasure := 1;     // первая единица измерения
       NumberOnImage [2,2].MyNumber := NumberOnImage [2,1].MyNumber;
       NumberOnImage [2,2].MySize := NumberOnImage [2,1].MySize - 13;
      NumberOnImage [3,1].MySize := Random (12) + 23;
      NumberOnImage [3,1].MyMeasure := 1;     // первая единица измерения
      NumberOnImage [3,2].MyNumber := NumberOnImage [3,1].MyNumber;
      NumberOnImage [3,2].MySize := NumberOnImage [3,1].MySize - 23;
       NumberOnImage [4,1].MySize := Random (12) + 20;
       NumberOnImage [4,1].MyMeasure := 2;     // первая единица измерения
       NumberOnImage [4,2].MyNumber := NumberOnImage [4,1].MyNumber;
       NumberOnImage [4,2].MySize := NumberOnImage [4,1].MySize - 20;
      NumberOnImage [5,1].MySize := Random (12) + 13;
      NumberOnImage [5,1].MyMeasure := 1;     // первая единица измерения
      NumberOnImage [5,2].MyNumber := NumberOnImage [5,1].MyNumber;
      NumberOnImage [5,2].MySize := NumberOnImage [5,1].MySize - 13;
        for i := 1 to 5 do
          Begin
             While NumberOnImage [i,2].MyNumber mod 2 = 0 do
              Begin
                NumberOnImage [i,2].MyNumber := NumberOnImage [i,2].MyNumber div 2;
                Inc(NumberOnImage [i,2].MySize);
              End;
            If NumberOnImage[i,2].MySize = 1 then
                Begin
                  NumberOnImage[i,2].MySize := 0;
                  NumberOnImage[i,2].MyNumber := NumberOnImage[1,2].MyNumber*2;
                End;
            if NumberOnImage[i,2].MyNumber = 1 then NumberOnImage[i,2].MyNumber:=0;
          End;
            NumberOnImage [1,2].MyMeasure := 2;     // вторая единица измерения
            NumberOnImage [2,2].MyMeasure := 3;
            NumberOnImage [3,2].MyMeasure := 4;
            NumberOnImage [4,2].MyMeasure := 4;
            NumberOnImage [5,2].MyMeasure := 3;
       End;
   end;
      for i := 1 to 5 do
        for k := 1 to 2 do
          With Expr do
          Begin
            FontSize := 18;
            if NumberOnImage[i,k].MyNumber > 999 then
              Begin
               Bit := IntToStr(NumberOnImage[i,k].MyNumber div 1000) + ' ' + IntToStr((NumberOnImage[i,k].MyNumber mod 1000) div 100) + IntToStr((NumberOnImage[i,k].MyNumber mod 100) div 10) + IntToStr(NumberOnImage[i,k].MyNumber mod 10);
               Expr := TExprVar.Create(Bit);
              End Else
                If NumberOnImage[i,k].MyNumber > 0 Then
                  Begin
                     Expr := TExprVar.Create(IntToStr(NumberOnImage[i,k].MyNumber));  // первое число
                          If NumberOnImage[i,k].MySize > 0 Then
                            Begin
                              AddNext(TExprSign.Create(esCrossMultiply));
                              AddNext(TExprIndex.Create(TExprVar.Create('2'),nil,TExprVar.Create(IntToStr(NumberOnImage[i,k].MySize))));     // двойка в степени
                              FontSize := FontSize-4;
                            End;
                  End Else
                       Begin
                        if NumberOnImage[i,k].MySize = 1 then Expr := TExprVar.Create('2') Else
                                   Expr := TExprIndex.Create(TExprVar.Create('2'),nil,TExprVar.Create(IntToStr(NumberOnImage[i,k].MySize)));
                        FontSize := FontSize-2;
                      End;
        AddNext (TExprVar.Create(Measure[NumberOnImage[i,k].MyMeasure]));                       // единица измерения
        Expr:=TExprChain.Create(Expr);
        Canvas := ImageL[i,k].Canvas;
        Font.Size := FontSize;
        Font.Style:=[fsBold];
        Color := NumberOnImage[i,k].MyColor;
        Draw(75,32,ehCenter,evCenter);
        Free;
       End;
ResultButton.Enabled := True;
end;

procedure TRazm.Timer1Timer(Sender: TObject);
begin
  StopWatch.Caption := TimeToStr(Time-TimeNow);
end;

end.
