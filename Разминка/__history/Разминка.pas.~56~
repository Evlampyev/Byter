unit Разминка;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Imaging.jpeg, Vcl.ExtCtrls,
  Vcl.StdCtrls, Vcl.Buttons, Vcl.Imaging.pngimage, Vcl.Imaging.GIFImg, Vcl.Menus, StrUtils,
  IdBaseComponent, IdComponent, IdTCPConnection, IdTCPClient, httpapp, System.NetEncoding,
  IdIPWatch;
Type
  TFriendPanel = Class(Tpanel);
type
  TRazm = class(TForm)
    Fon: TImage;
    Ravno2: TImage;
    Ravno1: TImage;
    Panel6: TPanel;
    Panel7: TPanel;
    Panel5: TPanel;
    Panel8: TPanel;
    Panel9: TPanel;
    Panel11: TPanel;
    Panel12: TPanel;
    Panel13: TPanel;
    Ravno3: TImage;
    Ravno4: TImage;
    MainMenu1: TMainMenu;
    Control: TMenuItem;
    N2: TMenuItem;
    N3: TMenuItem;
    Letter: TMenuItem;
    Autor: TMenuItem;
    Low: TMenuItem;
    NOrmal: TMenuItem;
    Hi: TMenuItem;
    VeryHi: TMenuItem;
    Sopos: TMenuItem;
    N21: TMenuItem;
    N31: TMenuItem;
    N11: TMenuItem;
    N12: TMenuItem;
    ImageLevel: TImage;
    Panel10: TPanel;
    ResultButton: TButton;
    Stopwatch: TLabel;
    Timer1: TTimer;
    Registration: TMenuItem;
    RegLabel: TLabel;
    IdTCPClient1: TIdTCPClient;
    Edit1: TEdit;
    ServerOption: TMenuItem;
    ServerOptionPanel: TPanel;
    Edit2: TEdit;
    Edit3: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    OptionCloseButton: TButton;
    SendButton: TButton;
    IdIPWatch1: TIdIPWatch;
    ConnectLabel: TLabel;
    ExitImage: TImage;
    ExitPanel: TPanel;
    Panel14: TPanel;
    Ravno5: TImage;
    Panel15: TPanel;
    Panel16: TPanel;
    Panel17: TPanel;
    Panel18: TPanel;
    Image1: TImage;
    Image2: TImage;
    Image3: TImage;
    Image4: TImage;
    Image5: TImage;
    Image6: TImage;
    Image7: TImage;
    Image8: TImage;
    Image16: TImage;
    Image17: TImage;

    procedure ВыходClick(Sender: TObject);
    procedure Panel2MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure FormCreate(Sender: TObject);
    procedure Panel5MouseLeave(Sender: TObject);
    procedure AutorClick(Sender: TObject);
    procedure LowClick(Sender: TObject);
    procedure NOrmalClick(Sender: TObject);
    procedure HiClick(Sender: TObject);
    procedure VeryHiClick(Sender: TObject);
    procedure ResultButtonClick(Sender: TObject);
    procedure SoposClick(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
    procedure RegistrationClick(Sender: TObject);
    procedure ServerOptionClick(Sender: TObject);
    procedure OptionCloseButtonClick(Sender: TObject);
    procedure SendButtomClick(Sender: TObject);
    procedure OnError(Sender: TObject;  var ErrorCode: Integer);
    procedure Image16MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);


  private
    { Private declarations }
     Gif,ExitGif: TGifImage;
  Procedure ClearFormRazm;
  public
    { Public declarations }

    procedure SendButtonClick;
  end;

var
  Razm: TRazm;
  PanelL: Array [1..5, 1..2] of Tpanel;
  PanelA: Array [1..5, 1..2] of Tpanel;
  Level, LevelTime: Byte;
  TimeNow, TimeOne : TTime;
  LastName, NameI, School: String;
  SendText:String;

implementation

{$R *.dfm}

uses Oprogr, Registration, ExprDraw, ExprMake;
    // Выбор режима сложности
procedure TRazm.LowClick(Sender: TObject);
begin
      IF Not Low.Checked Then
      Begin
        Low.Checked := True;
        Hi.Checked := False;
        Normal.Checked := False;
        VeryHi.Checked := False;
        ImageLevel.Picture.LoadFromFile('Pictures\Level\Low.png');
        Panel10.Caption := 'ЛЁГКИЙ УРОВЕНЬ';
        Level := 1;
      End;
end;
procedure TRazm.NOrmalClick(Sender: TObject);
begin
     IF Not Normal.Checked Then
      Begin
        Low.Checked := False;
        Hi.Checked := False;
        VeryHi.Checked := False;
        Normal.Checked := True;
        ImageLevel.Picture.LoadFromFile('Pictures\Level\Normal.png');
        Panel10.Caption := 'СРЕДНИЙ УРОВЕНЬ';
        Level := 2;
      End;
end;
procedure TRazm.HiClick(Sender: TObject);
begin
     IF Not Hi.Checked Then
      Begin
        Low.Checked := False;
        Hi.Checked := True;
        Normal.Checked := False;
        VeryHi.Checked := False;
        ImageLevel.Picture.LoadFromFile('Pictures\Level\Hi.png');
        Panel10.Caption := 'СЛОЖНЫЙ УРОВЕНЬ';
        Level := 3;
      End;
end;
procedure TRazm.Image16MouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
 const
    SC_DRAGMOVE = $F012;
begin
    ReleaseCapture;
    ((Sender as TImage).Parent as TPAnel).Perform(WM_SYSCOMMAND, SC_DRAGMOVE, 0);
end;

procedure TRazm.VeryHiClick(Sender: TObject);
begin
     IF Not VeryHi.Checked Then
      Begin
        Low.Checked := False;
        Hi.Checked := False;
        Normal.Checked := False;
        VeryHi.Checked := True;
        ImageLevel.Picture.LoadFromFile('Pictures\Level\VeryHi.png');
        Panel10.Caption := 'ЗАСТАВЛЯЕТ ДУМАТЬ';
        Level := 4;
      End;
end;

Function Stepen (k: Byte): Word;  // возвращает степень двойки
    Var
      i:Byte;
      Step: Word;
    Begin
      Step := 1;
      for i := 1 to k do
        Step := Step*2;
      Stepen := Step;
    End;

Procedure TRazm.ClearFormRazm;
Var
  i:byte;
Begin
  for i  := 1 to 5 do
    Begin
      PanelL[i,1].Visible := False;
      PanelL[i,2].Visible := False;
    End;
  StopWatch.Caption := '0:00:0';
  ResultButton.Enabled := False;
End;

procedure TRazm.AutorClick(Sender: TObject);
begin
  About.Visible := True;
  About.SetFocus;
end;

procedure TRazm.ВыходClick(Sender: TObject);  // Закрытие формы по кнопке ВЫХОД
begin
  Close;
end;

procedure TRazm.OptionCloseButtonClick(Sender: TObject);
begin
  IdTCPClient1.Port := StrToInt(Edit2.Text);
  IdTCPClient1.Host := Edit3.Text;
  ServerOptionPanel.Visible := False;
end;

procedure TRazm.SendButtomClick(Sender: TObject);
Begin
  SendText:= 'IP =' + IdIPWatch1.LocalIP;
  SendButtonClick;
End;

procedure TRazm.SendButtonClick;
var
    s:TStringStream;
begin
  try
        Razm.IdTCPClient1.Connect; //Соединение
    Try
        s:=TStringStream.Create; //Инициализация потока s
        s.WriteString(SendText);  //Запись сообщения в поток s
        s.Position:=0; //Установка позиция на начало потока s
        Razm.IdTCPClient1.IOHandler.Write(s, s.Size, true); //Передача сообщения
        s.Free; //Уничтожение потока s
      ConnectLabel.Caption := 'Связь есть';
    Except
      ConnectLabel.Caption := 'Нет связи';
    End;
  finally
      Razm.IdTCPClient1.Disconnect; //Отсоединение
  end;
end;

procedure TRazm.OnError(Sender: TObject; var ErrorCode: Integer);

begin
if ErrorCode = 10061  then
  begin
    Abort;

  end;
end;

procedure TRazm.FormCreate(Sender: TObject);
 Var
    i, k, l: Byte;
    Expr1: TExprClass;
begin
  for i := 0 to ComponentCount-1 do   // Заполнение массивов имеющимися элементами с формы
    Begin
     if Components[i].Tag > 100 Then
        PanelA [(Components[i].Tag div 100), (Components[i].Tag mod 10)] := (Components[i] as TPanel)
        Else
          If Components[i].Tag > 10 then
             PanelL [Components[i].Tag div 10, Components[i].Tag mod 10] := (Components[i] as TPanel);
    End;



    Gif := TGifImage.Create;
    Gif.LoadFromFile('Pictures\Gif\Blink.gif');
    Gif.Animate := True;
    Gif.AnimateLoop := glEnabled;
    Ravno1.Picture.Assign(Gif);
    Ravno2.Picture.Assign(Gif);
    Ravno3.Picture.Assign(Gif);
    Ravno4.Picture.Assign(Gif);
    Ravno5.Picture.Assign(Gif);

    ExitGif := TGifImage.Create;
    ExitGif.LoadFromFile('Pictures\Gif\ExitLive.gif');
    ExitGif.Animate := True;
    ExitImage.Picture.Assign(ExitGif);

  Level := 1;
  ImageLevel.Picture.LoadFromFile('Pictures\Level\Low.png');
  Panel10.Caption := 'ЛЁГКИЙ УРОВЕНЬ';
  try
    IdTCPClient1.Connect;
    ConnectLabel.Caption := 'Cвязь есть';
    IdTCPClient1.DisConnect;
  except
    ConnectLabel.Caption := 'Нет связи';
  end;
            Expr1 := TExprIndex.Create(TExprVar.Create('2'),nil,TExprVar.Create('8'));
            Expr1.AddNext (TExprVar.Create(' бит'));
            Expr1.Font.Size := 18;
            Expr1.Canvas := TFriendPanel(Panel18).Canvas;

            //Expr1.Font.Color := RGB(255,0,255);
            Expr1.Draw(30,30,ehCenter,evCenter);
            Expr1.Free;
end;

procedure TRazm.Panel2MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);// Перемещение объектов по форме
 const
    SC_DRAGMOVE = $F012;
 begin
    ReleaseCapture;
    (Sender as TPanel).Perform(WM_SYSCOMMAND, SC_DRAGMOVE, 0);
 end;

procedure TRazm.Panel5MouseLeave(Sender: TObject); // Расставляет аккуратно все панельки на места
var
  aRect : TRect;
  I: Integer;
  Lx,Ly, Ax,Ay, Px, Py,Xx, Yy : Byte;
begin
  Lx := 1;
  Ly := 1;
  Ax := 1;
  Ay := 1;
  if Sender.ClassType = TPanel then
    While Sender <> PanelL[Lx,Ly] do
      Begin
        Ly := Ly+1;
        if Ly > 2  then
        Begin
          Ly := 1;
          Lx := Lx+1;
        End;
      End Else
    While ((Sender as TImage).Parent as TPanel) <> PanelL[Lx,Ly] do
      Begin
        Ly := Ly+1;
        if Ly > 2  then
        Begin
          Ly := 1;
          Lx := Lx+1;
        End;
      End;

 for Ax := 1 to 5 do
   for Ay := 1 to 2 do
     if IntersectRect(aRect, PanelL[Lx,Ly].BoundsRect, PanelA[Ax,Ay].BoundsRect) then
        Begin
          Px := 1; Py := 1; Xx:=0;
          While (Xx=0) And (Px < 5) do
            Begin
                if IntersectRect(aRect, PanelL[Lx,Ly].BoundsRect, PanelL[Px,Py].BoundsRect) then
                  Begin
                    Xx := Px;
                    Yy := Py;
                  End;
                Py := Py +1;
                if Py = 3 then
                  Begin
                    Py := 1;
                    Px := Px +1;
                  End
            End;
         if Xx > 0 then PanelL[Xx,Yy].Left := PanelL[Xx,Yy].Left - 200;
            PanelL[Lx,Ly].Top := PanelA[Ax,Ay].Top+6;
            PanelL[Lx,Ly].Left := PanelA[Ax,Ay].Left+6;
          End;
        End;

procedure TRazm.RegistrationClick(Sender: TObject);
Begin
  FormRegistration.Visible := True;
  FormRegistration.SetFocus;
  StopWatch.Visible := False;
  ResultButton.Enabled := False;
End;

procedure TRazm.ResultButtonClick(Sender: TObject); // Проверяет правильность выполнения задания
Var
  i, mark : Byte;
begin
 TimeOne := Time-TimeNow;
 Timer1.Enabled := False;
 Mark := 0;
 for i := 1 to 5 do
    Begin
      if PanelL[i,1].Top = PanelL[i,2].Top then Mark := Mark +1;
    End;
 ShowMessage ('Верно - ' + IntToStr (Mark));
 SendText := RegLabel.Caption + ' ' + IntToStr(Level) + ' ' + StopWatch.Caption + ' ' + IntToStr (Mark);
 SendButtonClick;
 ClearFormRazm;
End;

procedure TRazm.ServerOptionClick(Sender: TObject);
begin
  ServerOptionPanel.Visible:=True;
  ServerOptionPanel.SetFocus;
end;

procedure TRazm.SoposClick(Sender: TObject);
Var
  k, l, i, x: Byte;
  Top1, Top2, Left1, Left2: Word;
  kl: array [1..5,1..2] of String;
  kli: array [1..5,1..2] of Word;
  ColorFont : array [1..5] of Longint;
  Yes : Boolean;
  kStr:String[7];
  Expr: TExprClass;
  FBackgroundColor:TColor;
  begin
    ColorFont [1] := 65535;
    ColorFont [2] := 255;
    ColorFont [3] := 65280;
    ColorFont [4] := 16711935;
    for i := 1 to 4 do
        begin
          k := Random (4)+1;
          l := Random (4)+1;
          ColorFont [5] := ColorFont[k];
          ColorFont [k] := ColorFont[l];
          ColorFont [l] := ColorFont[5];
        end;
    TimeNow := Time;
    Timer1.Enabled := True;
    StopWatch.Visible := True;
   k := Random(4)+1;
   l := Random(3)+1;
   for i :=1 to 5 do
      Begin
          Top1 := Random (600) + 25;
          Top2 := Random (600) + 25;
          Left1 := Random (450) + 200;
          Left2 := Random (450) + 200;
          PanelL [i,1].Top := Top1;
          PanelL [i,2].Top := Top2;
          PanelL [i,1].Left := Left1;
          PanelL [i,2].Left := Left2;
          PanelL [i,1].Visible := True;
          PanelL [i,2].Visible := True;
          PanelL [i,1].Font.Color := ColorFont [k];
          x := k+l; if x > 4 Then x := x-4;
          PanelL [i,2].Font.Color := ColorFont [x];
          k := k+1; if k > 4  then k := k-4;
      End;
   case Level of
    1: Begin
       FillChar(kli,sizeof(kli),0);
       l:=1;
       Repeat
         k := Random (24)+1; Yes := False; i := 1;
          While (Not Yes) and (i < 5) do
            Begin
              if k = kli [i,1] then Yes := True;
              i := i +1;
            End;
          if Not Yes Then
            Begin
              kli [l,1] := k; Kli [l,2] := k*8;
              l := l+1;
            End;
       Until l=6;
       For i := 1 to 5 do
          Begin
            kl [i,1] := IntToStr (kli[i,1]) + ' Байт';
            kl [i,2] := IntToStr (kli[i,2]) + ' Бит';
          End;

        End;
    2: Begin
            k := Random (26)+5;
            kl [1,1] := IntToStr (k) + ' Байт';
            kl [1,2] := IntToStr(8*k) + ' Бит';
            k := Random (5)+8;
            kl [2,1] := IntToStr (k) + ' кбайт';
            kl [2,2] := IntToStr (k*1024) + ' Байт';
            k := Random (8)+1;
            kl [3,1] := IntToStr (k) + ' Мбайт';
            kl [3,2] := IntToStr (k*1024) + ' кбайт';
            k := Random (4)+1;
            kl [4,1] := IntToStr (k) + ' кбайт';
            kl [4,2] := IntToStr (k*1024*8) + ' Бит';
            k := Random (3)+5;
            kl [5,1] := IntToStr (k) + ' кбайт';
            kl [5,2] := IntToStr (k*1024*8) + ' Бит';

       End;
    3: Begin
            With Expr do
            Begin
            FBackgroundColor:=clBtnFace;
            k := Random (18)+9;
            kStr := IntToStr(k);
            Expr := TExprIndex.Create(TExprVar.Create('2'),nil,TExprVar.Create(kStr));
            AddNext (TExprVar.Create(' бит'));
            Expr:=TExprChain.Create(Expr);
            Canvas := Image1.Canvas;
            Font.Size := 18;
            Font.Style:=[fsBold];
            Color := PanelL[1,1].Font.Color;
            Draw(75,32,ehCenter,evCenter);
            Free;
            //kl [1,1] := '2^' + IntToStr (k) + ' Бит';
            kStr := IntToStr(k-3);
            Expr := TExprIndex.Create(TExprVar.Create('2'),nil,TExprVar.Create(kStr));
            AddNext (TExprVar.Create(' байт'));
            Expr:=TExprChain.Create(Expr);
            Canvas := Image2.Canvas;
            Font.Size := 18;
            Font.Style:=[fsBold];
            Color := PanelL[1,2].Font.Color;
            Draw(75,32,ehCenter,evCenter);
            Free;
            //kl [1,2] := '2^' + IntToStr(k-3) + ' Байт';
            k := Random (18)+14;
            kStr := IntToStr(k);
            Expr := TExprIndex.Create(TExprVar.Create('2'),nil,TExprVar.Create(kStr));
            AddNext (TExprVar.Create(' бит'));
            Expr:=TExprChain.Create(Expr);
            Canvas := Image3.Canvas;
            Font.Size := 18;
            Font.Style:=[fsBold];
            Color := PanelL[2,1].Font.Color;
            Draw(75,32,ehCenter,evCenter);
            Free;
            //kl [2,1] := '2^' + IntToStr (k) + ' Бит';
            kStr := IntToStr(k-13);
            Expr := TExprIndex.Create(TExprVar.Create('2'),nil,TExprVar.Create(kStr));
            AddNext (TExprVar.Create(' кбайт'));
            Expr:=TExprChain.Create(Expr);
            Canvas := Image4.Canvas;
            Font.Size := 18;
            Font.Style:=[fsBold];
            Color := PanelL[2,2].Font.Color;
            Draw(75,32,ehCenter,evCenter);
            Free;
//            kl [2,2] := '2^' + IntToStr (k-13) + ' кбайт';
            k := Random (8)+24;
            kStr := IntToStr(k);
            Expr := TExprIndex.Create(TExprVar.Create('2'),nil,TExprVar.Create(kStr));
            AddNext (TExprVar.Create(' бит'));
            Expr:=TExprChain.Create(Expr);
            Canvas := Image5.Canvas;
            Font.Size := 18;
            Font.Style:=[fsBold];
            Color := PanelL[3,1].Font.Color;
            Draw(75,32,ehCenter,evCenter);
            Free;
//            kl [3,1] := '2^' + IntToStr (k) + ' Бит';
            kStr := IntToStr(k-23);
            Expr := TExprIndex.Create(TExprVar.Create('2'),nil,TExprVar.Create(kStr));
            AddNext (TExprVar.Create(' Мбайт'));
            Expr:=TExprChain.Create(Expr);
            Canvas := Image6.Canvas;
            Font.Size := 18;
            Font.Style:=[fsBold];
            Color := PanelL[3,2].Font.Color;
            Draw(75,32,ehCenter,evCenter);
            Free;
//            kl [3,2] := '2^' + IntToStr (k-23) + ' Мбайт';
            k := Random (18)+21;
            kStr := IntToStr(k);
            Expr := TExprIndex.Create(TExprVar.Create('2'),nil,TExprVar.Create(kStr));
            AddNext (TExprVar.Create(' байт'));
            Expr:=TExprChain.Create(Expr);
            Canvas := Image7.Canvas;
            Font.Size := 18;
            Font.Style:=[fsBold];
            Color := PanelL[4,1].Font.Color;
            Draw(75,32,ehCenter,evCenter);
            Free;
//            kl [4,1] := '2^' + IntToStr (k) + ' байт';
            kStr := IntToStr(k-20);
            Expr := TExprIndex.Create(TExprVar.Create('2'),nil,TExprVar.Create(kStr));
            AddNext (TExprVar.Create(' Мбайт'));
            Expr:=TExprChain.Create(Expr);
            Canvas := Image8.Canvas;
            Font.Size := 18;
            Font.Style:=[fsBold];
            Color := PanelL[4,2].Font.Color;
            Draw(75,32,ehCenter,evCenter);
            Free;
//            kl [4,2] := '2^' + IntToStr (k-20) + ' Мбайт';

            k := Random (18)+17;
            kStr := IntToStr(k);
            Expr := TExprIndex.Create(TExprVar.Create('2'),nil,TExprVar.Create(kStr));
            AddNext (TExprVar.Create(' бит'));
            Expr:=TExprChain.Create(Expr);
            Canvas := Image16.Canvas;
            Font.Size := 18;
            Font.Style:=[fsBold];
            Color := PanelL[5,1].Font.Color;
            Draw(75,32,ehCenter,evCenter);
            Free;
//            kl [5,1] := '2^' + IntToStr (k) + ' Бит';
            kStr := IntToStr(k-13);
            Expr := TExprIndex.Create(TExprVar.Create('2'),nil,TExprVar.Create(kStr));
            AddNext (TExprVar.Create(' кбайт'));
            Expr:=TExprChain.Create(Expr);
            Canvas := Image17.Canvas;
            Font.Size := 18;
            Font.Style:=[fsBold];
            Color := PanelL[5,2].Font.Color;
            Draw(75,32,ehCenter,evCenter);
            Free;
//            kl [5,2] := '2^' + IntToStr (k-13) + ' кбайт';
            End;
       End;
    4: Begin
            for I := 1 to 5 do
              Begin
                PanelL[i,1].Font.Size := 12;
                PanelL[i,2].Font.Size := 12;
              End;

            k := Random (9)+9;
            Top1 := Random (9) + 1;
            kl [1,1] := IntToStr (Stepen(Top1)) + '*' + '2^' + IntToStr(k) + ' Бит';
            kl [1,2] := '2^' + IntToStr(k + Top1 - 3) + ' Байт';
            k := Random (18)+14;
            Top1 := Random (9) + 1;
            kl [2,1] := IntToStr (Stepen(Top1)) + '*' + '2^' + IntToStr (k) + ' Бит';
            kl [2,2] := '2^' + IntToStr (k + Top1 - 13) + ' кбайт';
            k := Random (8)+24;
            Top1 := Random (9) + 1;
            kl [3,1] := IntToStr (Stepen(Top1)) + '*' + '2^' + IntToStr (k) + ' Бит';
            kl [3,2] := '2^' + IntToStr (k + Top1 - 23) + ' Мбайт';
            k := Random (18)+21;
            Top1 := Random (9) + 1;
            kl [4,1] := IntToStr (Stepen(Top1)) + '*' + '2^' + IntToStr (k) + ' байт';
            kl [4,2] := '2^' + IntToStr (k + Top1 - 20) + ' Мбайт';

            k := Random (18)+17;
            Top1 := Random (9) + 1;
            kl [5,1] := IntToStr (Stepen(Top1)) + '*' + '2^' + IntToStr (k) + ' Бит';
            kl [5,2] := '2^' + IntToStr (k + Top1 - 13) + ' кбайт';

      End;
   end;

ResultButton.Enabled := True;
end;

procedure TRazm.Timer1Timer(Sender: TObject);
begin
  StopWatch.Caption := TimeToStr(Time-TimeNow);
end;

end.
